package ex01_one_dim;

import java.util.Arrays;

public class Ex03_array3 {

	public static void main(String[] args) {
		
		// 배열의 데이터타입
		// int[] : 참조 타입 (Reference Type)
		
		/*
		
	int[] arr = { 10000, 20000, 30000 };
			
	     |-------|
	 arr | 0x123 |
	     |-------|
	     |  ...  |
	     |-------|
  arr[0] | 10000 | 0x123		// 메모리를 연속된 공간을 사용한다.
	     |-------|				// 인덱스는 상대적으로 떨어진 위치를 말한다.
  arr[1] | 20000 | 
	     |-------|
  arr[2] | 30000 | 
	     |-------|
	*/
		
		// 배열의 길이 늘리기
		// 1. 배열의 길이는 변경할 수 없다.
		// 2. 늘어난 길이의 새로운 배열을 만들고, 
		//    기존 배열의 값을 모두 새로운 배열로 옮기고,
		//    기존 배열의 참조값을 새로운 배열의 참조값으로 수정한다.
				
		/*
			
	     |-------|		arr = arr2		     |-------|
	 arr | 0x123 |						arr2 | 0x456 |
	     |-------|							 |-------|
	     |  ...  |						     |  ...  |
	     |-------|						     |-------|
  arr[0] | 10000 | 0x123			  		 |       | 0x456
	     |-------|					 		 |       |		
  arr[1] | 20000 | 				   	  		 |       |
	     |-------|						     |       |
  arr[2] | 30000 | 					  		 |       |	 
	     |-------|						     |-------|
	
	배열 arr의 값을 모두 0x456으로 옮겨주고, arr의 참조값을 0x456으로 수정한다.
	그러면 0x123은 메모리 누수가 발생한다. 메모리는 잡혀있지만, 아무도 사용하지 않는다.
	자바는 스스로 해결하는데 JVM이 하고 싶을 때 한다.
	
	*/		
		
		// 길이가 5인 배열을 사용하다가, 길이가 1000인 배열로 바꾸기
		
		int[] arr = {1, 2, 3, 4, 5};
		
		// 늘어난 길이의 새로운 배열을 만들고,
		int[] temp = new int[1000];
		
		// 기존 배열의 값을 모두 새로운 배열로 옮기고,
		System.arraycopy(arr, 0, temp, 0, arr.length);
		
		// 기존 배열의 참조값을 새로운 배열의 참조값으로 수정한다.
		arr = temp;
		
		// 이제 arr 배열의 길이는 1000이다.
		System.out.println(arr.length);
		System.out.println(Arrays.toString(arr));
		
		
		
		
		
		
		
		
	}

}
